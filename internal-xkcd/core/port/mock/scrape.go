// Code generated by MockGen. DO NOT EDIT.
// Source: internal-api/core/port/scrape.go

// Package mock_port is a generated GoMock package.
package mock

import (
	domain "myapp/internal-xkcd/core/domain"
	util "myapp/internal-xkcd/core/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScrapeService is a mock of ScrapeService interface.
type MockScrapeService struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeServiceMockRecorder
}

// MockScrapeServiceMockRecorder is the mock recorder for MockScrapeService.
type MockScrapeServiceMockRecorder struct {
	mock *MockScrapeService
}

// NewMockScrapeService creates a new mock instance.
func NewMockScrapeService(ctrl *gomock.Controller) *MockScrapeService {
	mock := &MockScrapeService{ctrl: ctrl}
	mock.recorder = &MockScrapeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeService) EXPECT() *MockScrapeServiceMockRecorder {
	return m.recorder
}

// Scrape mocks base method.
func (m *MockScrapeService) Scrape(missedIDs map[int]bool, maxID int, temper *util.Temper) ([]domain.Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", missedIDs, maxID, temper)
	ret0, _ := ret[0].([]domain.Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrape indicates an expected call of Scrape.
func (mr *MockScrapeServiceMockRecorder) Scrape(missedIDs, maxID, temper interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockScrapeService)(nil).Scrape), missedIDs, maxID, temper)
}
